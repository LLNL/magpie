diff --git a/tpch-setup.sh b/tpch-setup.sh
index 021b253..c21ce7b 100755
--- a/tpch-setup.sh
+++ b/tpch-setup.sh
@@ -1,10 +1,57 @@
 #!/bin/bash
 
 function usage {
-	echo "Usage: tpch-setup.sh scale_factor [temp_directory]"
-	exit 1
+
+    echo " Usage: tpch-setup.sh [--cli --server --port --tempdir ] scale_factor"
+    echo " This script will generate and optimize data for Hive server benchmark testing."
+    echo " "
+    echo -e "  --cli\t\tCLI to use for Hive.  Options are 'beeline' or 'hive'.  Default is 'hive'."
+    echo " "
+    echo -e "  --server\tOptional parameter when using beeline CLI.  This is the server for the\n\t\tdatabase connection sring."
+    echo " "
+    echo -e "  --port\tOptional parameter when using beeline CLI. This is the port that Hive is listening on."
+    echo " "
+    echo -e "  --tempdir\tOptional parameter for data generation path."
+    echo " "
+    echo -e "  scale_factor\tScale factor for data generation in GB."
+    exit 1
+
 }
 
+# Get options
+while test $# -gt 0; do
+    case "$1" in
+        -h|--help)
+            usage
+            exit 0
+            ;;
+        --cli)
+            shift
+            CLITYPE="$1"
+            shift
+            ;;
+        --server)
+            shift
+            SERVER="$1"
+            shift
+            ;;
+        --port)
+            shift
+            PORT="$1"
+            shift
+            ;;
+        --tempdir)
+            shift
+            DIR="$1"
+            shift
+            ;;
+        *)
+            SCALE="$1"
+            shift
+            ;;
+    esac
+done
+
 function runcommand {
 	if [ "X$DEBUG_SCRIPT" != "X" ]; then
 		$1
@@ -17,6 +64,20 @@ if [ ! -f tpch-gen/target/tpch-gen-1.0-SNAPSHOT.jar ]; then
 	echo "Please build the data generator with ./tpch-build.sh first"
 	exit 1
 fi
+
+# if no CLI is supplied, default to hive
+if [ "X$CLITYPE" == "X" ]; then
+    $CLITYPE="hive"
+fi
+
+if [ "$CLITYPE" == "beeline" ]; then
+    if [ "X$SERVER" == "X" ] || [ "X$PORT" == "X" ]; then
+        echo "Server and port must be supplied if attempting to run beeline CLI"
+        usage
+        exit 1
+    fi
+fi
+
 which hive > /dev/null 2>&1
 if [ $? -ne 0 ]; then
 	echo "Script must be run where Hive is installed"
@@ -25,10 +86,6 @@ fi
 
 # Tables in the TPC-H schema.
 TABLES="part partsupp supplier customer orders lineitem nation region"
-
-# Get the parameters.
-SCALE=$1
-DIR=$2
 BUCKETS=13
 if [ "X$DEBUG_SCRIPT" != "X" ]; then
 	set -x
@@ -62,8 +119,12 @@ echo "TPC-H text data generation complete."
 
 # Create the text/flat tables as external tables. These will be later be converted to ORCFile.
 echo "Loading text data into external tables."
-runcommand "hive -i settings/load-flat.sql -f ddl-tpch/bin_flat/alltables.sql -d DB=tpch_text_${SCALE} -d LOCATION=${DIR}/${SCALE}"
 
+if [ "$CLITYPE" == "beeline" ]; then
+    runcommand "beeline -u jdbc:hive2://${SERVER}:${PORT} -i settings/load-flat.sql --silent=true --hivevar DB=tpch_text_${SCALE} --hivevar LOCATION=${DIR}/${SCALE} -f ddl-tpch/bin_flat/alltables.sql"
+else
+    runcommand "hive -i settings/load-flat.sql -f ddl-tpch/bin_flat/alltables.sql -d DB=tpch_text_${SCALE} -d LOCATION=${DIR}/${SCALE}"
+fi
 # Create the optimized tables.
 i=1
 total=8
@@ -80,20 +141,32 @@ REDUCERS=$((test ${SCALE} -gt ${MAX_REDUCERS} && echo ${MAX_REDUCERS}) || echo $
 
 for t in ${TABLES}
 do
-	echo "Optimizing table $t ($i/$total)."
-	COMMAND="hive -i settings/load-${SCHEMA_TYPE}.sql -f ddl-tpch/bin_${SCHEMA_TYPE}/${t}.sql \
-	    -d DB=${DATABASE} \
-	    -d SOURCE=tpch_text_${SCALE} -d BUCKETS=${BUCKETS} \
-            -d SCALE=${SCALE} -d REDUCERS=${REDUCERS} \
-	    -d FILE=orc"
-	runcommand "$COMMAND"
-	if [ $? -ne 0 ]; then
-		echo "Command failed, try 'export DEBUG_SCRIPT=ON' and re-running"
-		exit 1
-	fi
-	i=`expr $i + 1`
+    echo "Optimizing table $t ($i/$total)."
+    if [ "$CLITYPE" == "beeline" ]; then
+        COMMAND="beeline -u jdbc:hive2://${SERVER}:${PORT} -i settings/load-${SCHEMA_TYPE}.sql -f ddl-tpch/bin_${SCHEMA_TYPE}/${t}.sql \
+                --silent=true --hivevar DB=${DATABASE} \
+                --hivevar SOURCE=tpch_text_${SCALE} --hivevar BUCKETS=${BUCKETS} \
+                --hivevar SCALE=${SCALE} --hivevar REDUCERS=${REDUCERS} \
+                --hivevar FILE=orc"
+    else
+        COMMAND="hive -i settings/load-${SCHEMA_TYPE}.sql -f ddl-tpch/bin_${SCHEMA_TYPE}/${t}.sql \
+                -d DB=${DATABASE} \
+                -d SOURCE=tpch_text_${SCALE} -d BUCKETS=${BUCKETS} \
+                -d SCALE=${SCALE} -d REDUCERS=${REDUCERS} \
+                -d FILE=orc"
+    fi
+    runcommand "$COMMAND"
+    if [ $? -ne 0 ]; then
+        echo "Command failed, try 'export DEBUG_SCRIPT=ON' and re-running"
+        exit 1
+    fi
+    i=`expr $i + 1`
 done
 
-hive -i settings/load-${SCHEMA_TYPE}.sql -f ddl-tpch/bin_${SCHEMA_TYPE}/analyze.sql --database ${DATABASE}; 
+if [ "$CLITYPE" == "beeline" ]; then
+    beeline -u jdbc:hive2://${SERVER}:${PORT}/${DATABASE} -i settings/load-${SCHEMA_TYPE}.sql --silent=true -f ddl-tpch/bin_${SCHEMA_TYPE}/analyze.sql;
+else
+    hive -i settings/load-${SCHEMA_TYPE}.sql -f ddl-tpch/bin_${SCHEMA_TYPE}/analyze.sql --database ${DATABASE};
+fi
 
 echo "Data loaded into database ${DATABASE}."
diff --git a/tpcds-setup.sh b/tpcds-setup.sh
index f4ad326..7dfb41c 100755
--- a/tpcds-setup.sh
+++ b/tpcds-setup.sh
@@ -1,10 +1,56 @@
 #!/bin/bash
 
 function usage {
-	echo "Usage: tpcds-setup.sh scale_factor [temp_directory]"
-	exit 1
+
+    echo " Usage: tpcds-setup.sh [--cli --server --port --tempdir ] scale_factor"
+    echo " This script will generate and optimize data for Hive server benchmark testing."
+    echo " "
+    echo -e "  --cli\t\tCLI to use for Hive.  Options are 'beeline' or 'hive'.  Default is 'hive'."
+    echo " "
+    echo -e "  --server\tOptional parameter when using beeline CLI.  This is the server for the\n\t\tdatabase connection sring."
+    echo " "
+    echo -e "  --port\tOptional parameter when using beeline CLI. This is the port that Hive is listening on."
+    echo " "
+    echo -e "  --tempdir\tOptional parameter for data generation path."
+    echo " "
+    echo -e "  scale_factor\tScale factor for data generation in GB."
+    exit 1
 }
 
+# Get options
+while test $# -gt 0; do
+    case "$1" in
+        -h|--help)
+            usage
+            exit 0
+            ;;
+        --cli)
+            shift
+            CLITYPE="$1"
+            shift
+            ;;
+        --server)
+            shift
+            SERVER="$1"
+            shift
+            ;;
+        --port)
+            shift
+            PORT="$1"
+            shift
+            ;;
+        --tempdir)
+            shift
+            DIR="$1"
+            shift
+            ;;
+        *)
+            SCALE="$1"
+            shift
+            ;;
+    esac
+done
+
 function runcommand {
 	if [ "X$DEBUG_SCRIPT" != "X" ]; then
 		$1
@@ -17,6 +63,20 @@ if [ ! -f tpcds-gen/target/tpcds-gen-1.0-SNAPSHOT.jar ]; then
 	echo "Please build the data generator with ./tpcds-build.sh first"
 	exit 1
 fi
+
+# if no CLI is supplied, default to hive
+if [ "X$CLITYPE" == "X" ]; then
+    $CLITYPE="hive"
+fi
+
+if [ "$CLITYPE" == "beeline" ]; then
+    if [ "X$SERVER" == "X" ] || [ "X$PORT" == "X" ]; then
+        echo "Server and port must be supplied if attempting to run beeline CLI"
+        usage
+        exit 1
+    fi
+fi
+
 which hive > /dev/null 2>&1
 if [ $? -ne 0 ]; then
 	echo "Script must be run where Hive is installed"
@@ -27,9 +87,6 @@ fi
 DIMS="date_dim time_dim item customer customer_demographics household_demographics customer_address store promotion warehouse ship_mode reason income_band call_center web_page catalog_page web_site"
 FACTS="store_sales store_returns web_sales web_returns catalog_sales catalog_returns inventory"
 
-# Get the parameters.
-SCALE=$1
-DIR=$2
 if [ "X$BUCKET_DATA" != "X" ]; then
 	BUCKETS=13
 	RETURN_BUCKETS=13
@@ -70,7 +127,11 @@ hadoop fs -chmod -R 777  /${DIR}/${SCALE}
 
 echo "TPC-DS text data generation complete."
 
-HIVE="beeline -n hive -u 'jdbc:hive2://localhost:2181/;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace=hiveserver2?tez.queue.name=default' "
+if [ "$CLITYPE" == "beeline" ]; then
+    HIVE="beeline -u jdbc:hive2://${SERVER}:${PORT} -i settings/load-flat.sql --hivevar DB=tpcds_text_${SCALE} --hivevar LOCATION=${DIR}/${SCALE} -f ddl-tpcds/text/alltables.sql"
+else
+    HIVE="hive -i settings/load-flat.sql -f ddl-tpcds/text/alltables.sql -d DB=tpcds_text_${SCALE} -d LOCATION=${DIR}/${SCALE}"
+fi
 
 # Create the text/flat tables as external tables. These will be later be converted to ORCFile.
 echo "Loading text data into external tables."
@@ -98,24 +159,40 @@ REDUCERS=$((test ${SCALE} -gt ${MAX_REDUCERS} && echo ${MAX_REDUCERS}) || echo $
 # Populate the smaller tables.
 for t in ${DIMS}
 do
-	COMMAND="$HIVE  -i settings/load-partitioned.sql -f ddl-tpcds/bin_partitioned/${t}.sql \
-	    --hivevar DB=tpcds_bin_partitioned_${FORMAT}_${SCALE} --hivevar SOURCE=tpcds_text_${SCALE} \
+    if [ "$CLITYPE" == "beeline" ]; then
+        COMMAND="beeline -u jdbc:hive2://${SERVER}:${PORT} -i settings/load-partitioned.sql -f ddl-tpcds/bin_partitioned/${t}.sql \
+            --hivevar DB=${DATABASE} --hivevar SOURCE=tpcds_text_${SCALE} \
             --hivevar SCALE=${SCALE} \
-	    --hivevar REDUCERS=${REDUCERS} \
-	    --hivevar FILE=${FORMAT}"
-	echo -e "${t}:\n\t@$COMMAND $SILENCE && echo 'Optimizing table $t ($i/$total).'" >> $LOAD_FILE
-	i=`expr $i + 1`
+            --hivevar REDUCERS=${REDUCERS} \
+            --hivevar FILE=${FORMAT}"
+    else
+        COMMAND="hive -i settings/load-partitioned.sql -f ddl-tpcds/bin_partitioned/${t}.sql \
+            -d DB=tpcds_bin_partitioned_${FORMAT}_${SCALE} -d SOURCE=tpcds_text_${SCALE} \
+            -d SCALE=${SCALE} \
+            -d REDUCERS=${REDUCERS} \
+            -d FILE=${FORMAT}"
+    fi
+    echo -e "${t}:\n\t@$COMMAND $SILENCE && echo 'Optimizing table $t ($i/$total).'" >> $LOAD_FILE
+    i=`expr $i + 1`
 done
 
 for t in ${FACTS}
 do
-	COMMAND="$HIVE  -i settings/load-partitioned.sql -f ddl-tpcds/bin_partitioned/${t}.sql \
-	    --hivevar DB=tpcds_bin_partitioned_${FORMAT}_${SCALE} \
+    if [ "$CLITYPE" == "beeline" ]; then
+        COMMAND="beeline -u jdbc:hive2://${SERVER}:${PORT} -i settings/load-partitioned.sql -f ddl-tpcds/bin_partitioned/${t}.sql \
+            --hivevar DB=tpcds_bin_partitioned_${FORMAT}_${SCALE} \
             --hivevar SCALE=${SCALE} \
-	    --hivevar SOURCE=tpcds_text_${SCALE} --hivevar BUCKETS=${BUCKETS} \
-	    --hivevar RETURN_BUCKETS=${RETURN_BUCKETS} --hivevar REDUCERS=${REDUCERS} --hivevar FILE=${FORMAT}"
-	echo -e "${t}:\n\t@$COMMAND $SILENCE && echo 'Optimizing table $t ($i/$total).'" >> $LOAD_FILE
-	i=`expr $i + 1`
+            --hivevar SOURCE=tpcds_text_${SCALE} --hivevar BUCKETS=${BUCKETS} \
+            --hivevar RETURN_BUCKETS=${RETURN_BUCKETS} --hivevar REDUCERS=${REDUCERS} --hivevar FILE=${FORMAT}"
+    else
+        COMMAND="hive -i settings/load-partitioned.sql -f ddl-tpcds/bin_partitioned/${t}.sql \
+            -d DB=tpcds_bin_partitioned_${FORMAT}_${SCALE} \
+            -d SCALE=${SCALE} \
+            -d SOURCE=tpcds_text_${SCALE} -d BUCKETS=${BUCKETS} \
+            -d RETURN_BUCKETS=${RETURN_BUCKETS} -d REDUCERS=${REDUCERS} -d FILE=${FORMAT}"
+    fi
+    echo -e "${t}:\n\t@$COMMAND $SILENCE && echo 'Optimizing table $t ($i/$total).'" >> $LOAD_FILE
+    i=`expr $i + 1`
 done
 
 make -j 1 -f $LOAD_FILE
